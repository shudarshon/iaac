#!/usr/bin/env python

from libcloud.compute.types import Provider
from libcloud.compute.providers import get_driver
from libcloud.compute.base import Node, NodeDriver, NodeLocation, NodeSize
from os import path

class AwsCloud:
    __awskey                = {}
    __aws_credential_path   = None
    __access_id             = None
    __secret_id             = None
    __region                = None

    def __init__(self, credential_path, region):
        self.__aws_credential_path  = path.expanduser(credential_path)
        self.__region = region

    def __enter__(self):
        try:
            with open(self.__aws_credential_path,'r') as f:
                for i,line in enumerate(f):
                    if i>0:
                        key_id,val = line.partition('=')[::2]
                        self.__awskey.update({key_id.strip():val.strip()})

                self.__access_id = self.__awskey['aws_access_key_id']
                self.__secret_id = self.__awskey['aws_secret_access_key']
                return self
        except:
            print("invalid aws configuration filepath or content!")
            return -1

    def __exit__(self, exc_type, exc_value, traceback):
        return self

    def get_id(self, id):
        self.id = id
        return self

    def get_name(self, name):
        self.name = name
        return self

    def connect_aws(self):
        cls = get_driver(Provider.EC2)                              #class
        driver = cls(self.__access_id, self.__secret_id)            #object
        return driver

with AwsCloud('~/.aws/credentials','us-east-1') as cloud:
    conn = cloud.connect_aws()

    """
        create key pair
    """
    #print("Enter new keypair name:")
    #key_name = input()
    #conn.create_key_pair(key_name)

    """
        add key pair from file
    """
    #key_file_path = path.expanduser('~/.ssh/id_rsa.pub')
    #print("Enter new keypair name: ")
    #key_name=input()
    #conn.import_key_pair_from_file(name=key_name, key_file_path=key_file_path)

    """
        remove keypair
    """
    #print("Enter keypair name: ")
    #key_name = input()
    #key = cloud.get_name(key_name)
    #conn.delete_key_pair(key)

    """
        list keypair
    """
    #print(conn.list_key_pairs())


    """
        create security group
    """
    #print("Enter security group name:")
    #sg_name = input()
    #print("Enter security group description:")
    #sg_desc = input()
    #conn.ex_create_security_group(name=sg_name, description=sg_desc)

    """
        delete security group by name
    """
    #print("Enter security group name to delete:")
    #sg_name=input()
    #conn.ex_delete_security_group_by_name(group_name=sg_name)

    """
        authorize security group rule (default all traffic as outbound)
    """
    #print("Enter security group name:")
    #sg_name = input()
    #print("Enter beginning port to open:")
    #from_port = input()
    #print("Enter ending port range to open:")
    #to_port = input()
    #print("Enter IP address to allow traffic as CIDR format:")
    #cidr_ip = input()
    #conn.ex_authorize_security_group(name=sg_name, from_port=from_port, to_port=to_port, cidr_ip=cidr_ip, protocol='tcp')

    """
        add security group ingress rule by ip, security group and other aws account
    """
    #print("Enter the id of the security group:")
    #sg_id = input()
    #print("Enter beginning port to allow as ingress:")
    #from_port = input()
    #print("Enter ending port to allow as egress:")
    #to_port = input()
    #print("Enter IP address to allow ingress traffic as CIDR format:") #need to input as list
    #cidr_ips = list(input().split())
    #keep group_pairs commented as long as not needed
    #group_pairs = [{'group_name': 'default', 'user_id': '1234567890'}]
    #conn.ex_authorize_security_group_ingress(id=sg_id, from_port=from_port, to_port=to_port, cidr_ips=cidr_ips, group_pairs=None, protocol='tcp')

    """
        add security group egress rule by ip, security group and other aws account
    """
    #print("Enter the id of the security group:")
    #sg_id = input()
    #print("Enter beginning port to allow as egress:")
    #from_port = input()
    #print("Enter ending port to allow as egress:")
    #to_port = input()
    #print("Enter IP address to allow egress traffic as CIDR format:") #need to input as list
    #cidr_ips = list(input().split())
    #keep group_pairs commented as long as not needed
    #group_pairs = [{'group_name': 'default', 'user_id': '1234567890'}]
    #conn.ex_authorize_security_group_egress(id=sg_id, from_port=from_port, to_port=to_port, cidr_ips=cidr_ips, group_pairs=None, protocol='tcp')


    """
        revoke security group ingress rule
    """
    #print("Enter the id of the security group:")
    #sg_id = input()
    #print("Enter beginning port to revoke as ingress:")
    #from_port = input()
    #print("Enter ending port to revoke as ingress:")
    #to_port = input()
    #print("Enter IP address to deny ingress traffic as CIDR format:") #need to input as list
    #cidr_ips = list(input().split())
    #keep group_pairs commented as long as not needed
    #group_pairs = [{'group_name': 'default', 'user_id': '1234567890'}]
    #conn.ex_revoke_security_group_ingress(id=sg_id, from_port=from_port, to_port=to_port, cidr_ips=cidr_ips, group_pairs=None, protocol='tcp')

    """
        revoke security group egress rule
    """
    #print("Enter the id of the security group:")
    #sg_id = input()
    #print("Enter beginning port to revoke as egress:")
    #from_port = input()
    #print("Enter ending port to revoke as egress:")
    #to_port = input()
    #print("Enter IP address to deny outgress traffic as CIDR format:") #need to input as list
    #cidr_ips = list(input().split())
    #keep group_pairs commented as long as not needed
    #group_pairs = [{'group_name': 'default', 'user_id': '1234567890'}]
    #conn.ex_revoke_security_group_egress(id=sg_id, from_port=from_port, to_port=to_port, cidr_ips=cidr_ips, group_pairs=None, protocol='tcp')

    """
        print security group list
    """
    print(conn.ex_list_security_groups())
